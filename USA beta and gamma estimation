import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
from scipy.integrate import odeint 
###############################################################################
###############################################################################
def Rsquare(a,b):
    abar = np.mean(a)
    SST = sum((a-abar)**2)
    SSE = sum((a-b)**2)
    return 1-SSE/SST


#data parts
total_cases = np.array([15,15,15,15,15,15,35,35,35,53,57,60,60,63,68,75,100,124,158,221,319,435,541,704,994,1301,1691,2290,2943,3830,5217,7204,10396,15240,21246,26398,36050,46925,58671,72363,90448,109684,129200,149554,173476,199390,227143,258190,291611,326598,353082,385815,421071,454233,488656,523335,553747,580322,608158,637574,669480,700092,733871,762909,788731,818564,845625,877662,909387,945796,980727,1007237,1031287,1057299,1086492,1118250,1154384,1183665,1210744,1236591,1262580,1288431,1318107,1347837,1373834,1394220,1413588,1437368,1460355,1488318,1516248,1540163,1559801,1583815,1605193,1627899,1656671,1681883,1703730,1723028,1742864,1763043,1783711,1807494,1833233,1857171,1877640,1897255,1919697,1940640,1963572,1989475,2012602,2032080,2051363,2070735,2091963,2115605,2143328,2169547,2190225,2211511,2237691,2264045,2292763,2326549,2360738,2387399,2419679,2456415,2495617,2536540,2584893,2629361,2670505,2716796,2764316,2817443,2876076,2937201,2987910,3035247,3087798,3144513,3207918,3270970,3344674,3408368,3468005,3534890,3602800,3676807,3751215,3827375,3892594,3958893,4023003,4092275,4165422,4237209,4317318,4388020,4445764,4508468,4575244,4641988,4713039,4787281,4847966,4898818,4948418,5003680,5059966,5120444,5184896,5243586,5293014,5342407,5397893,5454074,5508836,5570967,5625252,5664584,5705503,5749942,5795770,5841516,5892868,5938393,5973463,6014366,6055038,6100284,6146551,6196030,6241554,6277750,6315717,6358156,6399369,6445329,6498888,6543217,6575964,6602402,6630918,6667121,6706744,6753904,6795096,6829860,6868360,6905248,6945895,6992571,7044343,7088909,7123707,7160748,7196294,7238091,7283854,7338354,7383252,7418071,7456703,7500671,7543127,7591094,7643802,7693516,7728598,7770481,7813624,7862953,7920414,7982337,8036978,8081067,8128526,8181910,8240842,8307099,8379367,8439000,8490619,8549829,8612358,8679008,8753638,8837325,8917955,8982378,9052759,9128883,9210801,9303477,9405337,9494995,9573052,9663612,9758837,9866693,9989308,10125451,10256198,10366818,10493185,10637957,10784061,10949306,11136548,11298591,11448810,11613054,11775524,11952292,12146769,12352367,12530391,12684106,12861100,13039451,13223216,13387451,13555689,13703104,13849593,14019028,14202584,14410156,14633402,14872882,15089186,15274220,15476464,15687189,15915024,16144288,16392290,16619442,16816084,17018084,17221383,17474073,17713633,17971629,18171955,18363325,18566170,18765740,19000134,19212165,19367402,19534676,19680588,19868943,20068161,20306003,20549611,20779040,21016846,21221281,21419783,21653300,21919953,22201384,22510237,22771443,22993518,23213096,23442399,23683122,23918456,24168801,24377300,24556635,24708021,24882956,25075631,25270633,25467390,25644024,25787144,25939514,26092401,26254961,26420681,26593527,26740139,26853043,26981083,27097907,27213203,27340381,27475384,27585311,27677753,27772577,27872502,27972380,28081897,28187726,28275520,28343033,28400352,28467083,28541054,28613395,28698230,28770574,28829628,28888712,28962833,29039192,29118051,29199314,29264978,29319100,29373857,29431757,29499302,29568065,29637501,29697167,29742426,29787906,29843786,29905200,29967939,30036226,30088839,30131929,30178319,30231550])
currently_infected = np.array([12,12,12,12,12,10,29,29,28,48,51,54,54,57,60,65,85,106,138,200,289,401,504,663,949,1248,1643,2234,2836,3697,5047,6976,10111,14889,20784,25846,35352,45927,57305,70672,86917,104979,123133,141655,163798,186851,211702,239979,270208,301223,322976,352402,383341,411834,442491,474076,498548,521099,543468,567683,586863,606147,634055,652589,673025,698819,711829,738698,764258,774427,798440,821885,823212,842349,862838,883625,907008,921245,940126,952962,961777,970784,991606,1009933,1017113,1028815,1039258,1034086,1036645,1056663,1071156,1080675,1093060,1101536,1111254,1121710,1134653,1105767,1112634,1122728,1125222,1124573,1127424,1133926,1143956,1147353,1098116,1097566,1085166,1058167,1052238,1058439,1064799,1071642,1073572,1073791,1068622,1080482,1078158,1086752,1092808,1089732,1097521,1101746,1116560,1120131,1132704,1149104,1156056,1172707,1188669,1214815,1244033,1270805,1298477,1318741,1339273,1370572,1402166,1441590,1467923,1486803,1507091,1533495,1560203,1589358,1629467,1664466,1696315,1729943,1748262,1775113,1814981,1830157,1861098,1903071,1919190,1951525,1964608,1996643,2027523,2060289,2087570,2103340,2116962,2123532,2150624,2180696,2202690,2233360,2213795,2231858,2224402,2246150,2267499,2301434,2323130,2319123,2332443,2327684,2347375,2373042,2395051,2412725,2402029,2406323,2397904,2405877,2421119,2443042,2456510,2444360,2445243,2427274,2435213,2452807,2462939,2480176,2486366,2485086,2473655,2467979,2439415,2451805,2463989,2456151,2445574,2429817,2433210,2440250,2446860,2455652,2439960,2434686,2422432,2431433,2444242,2454186,2461428,2449043,2436504,2423630,2428830,2438272,2437743,2435235,2423349,2426356,2415618,2424708,2435203,2441183,2444572,2439670,2440955,2420213,2433760,2454137,2481243,2485186,2475008,2484500,2487659,2509794,2504984,2525297,2549934,2562243,2580723,2584424,2607983,2647222,2681981,2713742,2720969,2751481,2776211,2816413,2874846,2923900,2958628,2980088,3026021,3074591,3144900,3228869,3303569,3376704,3427586,3521231,3617422,3700163,3823242,3912767,4015622,4095958,4186919,4280874,4396263,4525717,4612740,4713881,4792989,4880202,4890726,5006681,5077050,5123739,5202265,5252238,5322013,5394558,5514756,5650999,5730987,5845582,5915555,6013664,6098039,6215261,6282083,6362152,6472069,6517874,6576285,6654936,6763595,6910904,6939837,7052293,7064074,7125998,7193776,7280048,7383207,7393626,7445935,7423175,7466408,7536089,7641998,7798158,7841863,7965820,7868523,7957885,8052885,8195914,8373748,8480341,8589412,8599015,8674350,8739656,8818972,8941785,9015154,9093502,9115588,9031744,9020672,9068481,9132083,9188876,9233051,9169600,9154116,9126861,9147908,9177119,9163375,9182920,9076187,9050050,8988500,8967266,8973293,8928957,8928255,8853220,8807378,8697486,8688489,8661801,8626027,8604157,8523797,8454940,8396130,8344232,8321419,8271314,8249550,8162619,8110692,8060424,8025013,8004556,7958754,7939631,7875163,7830305,7785699,7753723,7730300,7689361,7661972,7595109,7550434,7515120,7489392,7453607,7428615,7412822,7358977,7323714])
total_death = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,6,9,11,12,15,19,22,26,30,38,40,47,57,72,94,120,170,239,310,376,513,693,964,1272,1632,2135,2787,3289,4113,5215,6477,7689,8980,10559,11988,13514,15796,18011,20167,22457,24531,26294,28043,30680,33381,35641,38247,40175,41777,43767,46518,48943,51361,53361,55482,56662,58094,60642,63112,65398,67369,69106,70285,71634,74055,76645,78827,80562,82025,83255,84343,86266,88137,89942,91595,92849,93740,94766,96351,97797,99249,100575,101627,102258,102905,103681,105247,106485,107721,108754,109415,110116,111269,112379,113436,114428,115163,115556,116138,117247,118250,119170,119974,120698,121039,121462,122322,123151,123915,124653,125245,125521,125888,126769,127597,128257,128922,129446,129739,130097,130831,131516,132198,132832,133107,133378,133772,134779,135694,136674,137536,138291,138684,139157,140123,141147,142130,143103,143936,144362,144899,146100,147341,148537,149708,150640,151106,151703,153040,154510,156365,157823,158864,159292,159898,161317,162659,163891,165221,166254,166789,167343,168856,170273,171587,172753,173871,174400,174977,176380,177673,178775,179956,180940,181389,181884,183181,184477,185625,186737,187702,188079,188597,189771,190871,191991,193036,193751,194188,194478,194963,196178,197272,198369,199083,199484,199963,201164,202180,203065,204024,204690,204989,205368,206351,207469,208397,209295,210036,210314,210668,211648,212608,213526,214398,215162,215501,215926,216739,217672,218633,219548,220279,220607,220942,221791,222762,223640,224573,225235,225718,226174,227130,228341,229311,230214,231000,231443,231972,233030,234063,235109,236104,237034,237498,238090,239358,240640,241871,243182,244304,244920,245654,247214,248759,250016,251511,252846,253581,254419,256156,258203,260349,262424,264009,264972,266036,268335,270749,272261,273704,275009,275904,277250,280014,282975,285990,288794,291160,292363,294010,297097,300466,303667,306802,309287,310839,312619,315784,319507,323073,326019,328798,330418,332473,335961,339463,342460,343974,345503,346855,348924,352746,356727,360415,362722,364833,366261,368266,372078,376197,380361,384430,387711,389596,391675,396193,400296,404459,408284,411824,413693,415218,418069,422488,426886,430825,434283,436158,438094,442317,446597,450563,454272,457200,459124,461054,464779,468824,472496,476168,478969,480292,481875,485141,488575,491829,494878,497187,498307,499247,501058,503596,506354,509001,510925,512166,513543,515979,518506,520965,523236,524790,526078,527561,529650,532020,534067,535905,537463,538212,539043,540770,542438,544043,545559,546627,547288,548119,549367])

N = int(3e8)
TC0 = total_cases
I0 = currently_infected
#D = total_death[0:366]
R0 = TC0 - I0
S0 = N-R0-I0

###############################################################################
#infected and removed of USA
xtick = 12  
dates = list(pd.date_range(start='2020-04-15', end='2020-12-31'))
l = len(dates) 
p = round(l / xtick) 
x = [x.strftime('%Y-%m-%d') for x in dates[0:l]] 

# plt.plot(x, S, label='Susceptible')
plt.plot(x, TC0[60:321],'b', label='Total cases')
# plt.plot(x, I0[0:366], 'b', label='Active cases')
# plt.title('Total cases and currently infected cases of Italy') #, fontsize=15)
plt.xlabel('Time (Days)') #, fontsize=15)
plt.ylabel('Total cases') #, fontsize=15)
plt.legend()
ax=plt.gca()
ax.set_xticks(range(0, l, p))
ax.set_xticklabels([d.strftime('%m-%d') for d in dates[::p]])
plt.xticks(rotation=45)
plt.show()

###############################################################################
#Currently infected cases and removed cases of Italy
xtick = 10  
dates = list(pd.date_range(start='2020-04-15', end='2020-12-31'))
l = len(dates)  
p = round(l / xtick)  
x = [x.strftime('%Y-%m-%d') for x in dates[0:l]] 

#plt.plot(x, S, label='Susceptible')
# plt.plot(x, I0[60:321],'b',label='Active Cases')
plt.plot(x, R0[60:321],'b', label='Removed Cases')
# plt.title('Currently infected cases and removed cases of Italy') #, fontsize=15)
plt.xlabel('Time (Days)') #, fontsize=15)
plt.ylabel('Removed Cases') #, fontsize=15)
plt.legend()
ax=plt.gca()
ax.set_xticks(range(0, l, p))
ax.set_xticklabels([d.strftime('%m-%d') for d in dates[::p]])
plt.xticks(rotation=45)
plt.show()

###############################################################################
xtick = 10  # 
dates = list(pd.date_range(start='2020-02-15', end='2021-03-16'))
l = len(dates)  
p = round(l / xtick)  
x = [x.strftime('%Y-%m-%d') for x in dates[0:l]] 

#plt.plot(x, S, label='Susceptible')
plt.plot(x, I0, label='Currently infected')
#plt.plot(x, R0, label='Removed')
plt.title('Currently infected cases and removed cases of Italy') #, fontsize=15)
plt.xlabel('Time') #, fontsize=15)
plt.ylabel('Number of cases') #, fontsize=15)
plt.legend()
ax=plt.gca()
ax.set_xticks(range(0, l, p))
ax.set_xticklabels([d.strftime('%m-%d') for d in dates[::p]])
plt.xticks(rotation=45)
plt.grid(True)
plt.show()
###############################################################################
#data after censoring (300 data)
I = I0[60:321]
R = R0[60:321]

xtick = 11    
dates = list(pd.date_range(start='2020-04-15', end='2020-12-31'))
l = len(dates)  
p = round(l / xtick)  
x = [x.strftime('%Y-%m-%d') for x in dates[0:l]] 

#plt.plot(x, S, label='Susceptible')
plt.plot(x, I, label='Currently infected')
plt.plot(x, R, label='Removed')
plt.title('Currently infected cases and removed cases of Italy') #, fontsize=15)
plt.xlabel('Time') #, fontsize=15)
plt.ylabel('Number of cases') #, fontsize=15)
plt.legend()
ax=plt.gca()
ax.set_xticks(range(0, l, p))
ax.set_xticklabels([d.strftime('%m-%d') for d in dates[::p]])
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

###############################################################################
#tainning & test (prediction of 3 weeks)
I_train = I[0:240]
I_test = I[240:]
R_train = R[0:240]
R_test = R[240:]
print(len(R_test))

xtick = 11   
dates = list(pd.date_range(start='2020-04-15', end='2020-12-31'))
l = len(dates)  
p = round(l / xtick)  
x = [x.strftime('%Y-%m-%d') for x in dates[0:l]] 

#plt.plot(x, S, label='Susceptible')
plt.plot(x[0:240], I_train, label='Trainning data of infected cases')
plt.plot(x[240:], I_test, label='Test data of infected cases')
plt.title('Trainning and test data selection of currently infected cases') #, fontsize=15)
plt.xlabel('Time') #, fontsize=15)
plt.ylabel('Currently infected cases') #, fontsize=15)
plt.legend()
ax=plt.gca()
ax.set_xticks(range(0, l, p))
ax.set_xticklabels([d.strftime('%m-%d') for d in dates[::p]])
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

###############################################################################
###############################################################################
#SIR & SEIR model
def SIR(sir, t, beta, gamma):
    S, I, R = sir 
    dsdt = - beta * S * I/N 
    didt = beta * S * I/N - gamma * I 
    drdt = gamma * I 
    return [dsdt, didt, drdt]

def SEIR(seir, t, beta, sigma, gamma):
    S, E, I, R = seir
    dsdt = -beta*S*I/N
    dedt = beta*S*I/N-sigma*E
    didt = sigma*E-gamma*I
    drdt = gamma*I
    return [dsdt, dedt, didt, drdt]
###############################################################################
###############################################################################
#solutions of gamma beta 
#information
N = int(3e8)
I = I0[60:323]
R = R0[60:323]
dates = list(pd.date_range(start='2020-04-15', end='2020-12-31'))
l = len(dates)  
sigma = 1/6
###############################################################################
#gamma
n = len(R)
gamma = np.zeros(n-1)

for t in range(n-1):
    gamma[t] = (R[t+1]-R[t])/I[t]

###############################################################################
#E
E = np.zeros(n-1)

for t in range(n-1):
    E[t] = (I[t+1]-I[t]+gamma[t]*I[t])/sigma
    
###############################################################################
#S
S = np.zeros(n-1)

for t in range(n-1):
    S[t] = N-E[t]-I[t]-R[t]

###############################################################################
#Beta
beta = np.zeros(n-2)

for t in range(n-2):
    beta[t] = (S[t]-S[t+1])*N/(I[t]*S[t])

beta1 = np.zeros(n-2)

###############################################################################
r0 = np.zeros(n-2)
gamma1 = gamma[0:n-2]
gamma = gamma1  

for t in range(n-2):
    r0[t] = beta[t]/gamma1[t]

beta4 = beta
gamma4 = gamma
##############################################################################
def BackU(beta,gamma):
    N = int(3e8)
    n = 292
    s = np.zeros(261)
    e = np.zeros(261)
    i = np.zeros(261)
    r = np.zeros(261)
    s[0] = S[0]
    e[0] = E[0]
    i[0] = I[0]
    r[0] = R[0]
    
    for t in range(260):
        s[t+1] = s[t]-beta[t]*i[t]*s[t]/N
        e[t+1] = e[t]+beta[t]*i[t]*s[t]/N-sigma*e[t]
        i[t+1] = i[t]+sigma*e[t]-gamma[t]*i[t]
        r[t+1] = r[t]+gamma[t]*i[t]
    
    xtick = 12 
    dates = list(pd.date_range(start='2020-04-15', end='2020-12-31'))
    l = len(dates) 
    p = round(l / xtick) 
    x = [x.strftime('%Y-%m-%d') for x in dates[0:l]] 
    
    #plt.plot(x, S, label='Susceptible')
    plt.plot(x, I[0:261], color='r', label='real data')
    # plt.plot(x, i, color='r', label='SEIR combined with LSTM')
    plt.plot(x[0:240], i[0:240], color='b', label='SEIR-LSTM (training data)')
    plt.plot(x[240:], i[240:], color='g', label='SEIR-LSTM (test data)')
    #plt.plot(x[0:l-1], beta, label='beta')
    #plt.title('Infected and removed individuals of Italy') #, fontsize=15)
    plt.xlabel('Time (Days)') #, fontsize=15)
    plt.ylabel('Active cases') #, fontsize=15)
    plt.legend()
    ax=plt.gca()
    ax.set_xticks(range(0, l, p))
    ax.set_xticklabels([d.strftime('%m-%d') for d in dates[::p]])
    plt.xticks(rotation=45)
    plt.show()
    return i
    
N = int(3e8)
n = 292
s = np.zeros(261)
e = np.zeros(261)
i = np.zeros(261)
r = np.zeros(261)
s[0] = S[0]
e[0] = E[0]
i[0] = I[0]
r[0] = R[0]

for t in range(260):
    s[t+1] = s[t]-beta[t]*i[t]*s[t]/N
    e[t+1] = e[t]+beta[t]*i[t]*s[t]/N-sigma*e[t]
    i[t+1] = i[t]+sigma*e[t]-gamma[t]*i[t]
    r[t+1] = r[t]+gamma[t]*i[t]

xtick = 12  
dates = list(pd.date_range(start='2020-04-15', end='2020-12-31'))
l = len(dates) 
p = round(l / xtick)
x = [x.strftime('%Y-%m-%d') for x in dates[0:l]] 

#plt.plot(x, S, label='Susceptible')
plt.plot(x, R[0:261], color='r', label='real data')
# plt.plot(x, i, color='r', label='SEIR combined with LSTM')
plt.plot(x[0:240], r[0:240], color='b', label='SEIR-GRU (training data)')
plt.plot(x[240:], r[240:], color='g', label='SEIR-GRU (test data)')
#plt.plot(x[0:l-1], beta, label='beta')
#plt.title('Infected and removed individuals of Italy') #, fontsize=15)
plt.xlabel('Time (Days)') #, fontsize=15)
plt.ylabel('Removed Cases') #, fontsize=15)
plt.legend()
ax=plt.gca()
ax.set_xticks(range(0, l, p))
ax.set_xticklabels([d.strftime('%m-%d') for d in dates[::p]])
plt.xticks(rotation=45)
plt.show()






xtick = 12 
# dates = list(pd.date_range(start='2020-03-15', end='2020-12-31'))
# dates1 = list(pd.date_range(start='2020-03-15', end='2020-12-11'))
dates2 = list(pd.date_range(start='2020-12-11', end='2020-12-31'))
l = len(dates2) 
p = round(l / xtick) 
x = [x.strftime('%Y-%m-%d') for x in dates]
x1 = [x.strftime('%Y-%m-%d') for x in dates1]
x2 = [x.strftime('%Y-%m-%d') for x in dates2]
# plt.plot(x,y1, 'b', alpha=0.5, lw=2, label='unreported infecious')
a = I
b = BackU(Ublp1,Uglp1)
c = BackU(Ubgp1,Uggp2)

plt.plot(x2,np.abs(a[-23:-2]-c[-22:-1]), 'b', alpha=0.5, lw=2, label='SEIR-GRU (test data)')
plt.plot(x2,np.abs(a[-23:-2]-b[-22:-1]), 'g', alpha=0.5, lw=2, label='SEIR-LSTM (test data)')
plt.plot(x2,np.abs(a[-23:-2]-UIg1[-22:-1]), 'r', alpha=0.5, lw=2, label='GRU (test data)')
plt.plot(x2,np.abs(a[-23:-2]-UIl1[-22:-1]), 'y', alpha=0.5, lw=2, label='LSTM (test data)')

# plt.plot(x2,np.abs((a[-23:-2]-c[-22:-1])/a[-23:-2]), 'b', alpha=0.5, lw=2, label='SEIR-GRU (test data)')
# plt.plot(x2,np.abs((a[-23:-2]-b[-22:-1])/a[-23:-2]), 'g', alpha=0.5, lw=2, label='SEIR-LSTM (test data)')
# plt.plot(x2,np.abs((a[-23:-2]-UIg1[-22:-1])/a[-23:-2]), 'r', alpha=0.5, lw=2, label='GRU (test data)')
# plt.plot(x2,np.abs((a[-23:-2]-UIl1[-22:-1])/a[-23:-2]), 'y', alpha=0.5, lw=2, label='LSTM (test data)')
# # plt.title('Total Cases (USA)')
plt.xlabel('Time (Days)')
plt.ylabel('Absolute Error')
plt.legend()
ax=plt.gca()
ax.set_xticks(range(0, l, p))
ax.set_xticklabels([d.strftime('%m-%d') for d in dates2[::p]])
plt.xticks(rotation=45)
plt.show()

RMSEsg = np.sqrt(1/20*sum(((a[-23:-2]-c[-22:-1])**2)))
                 
RMSEsl = np.sqrt(1/20*sum(((a[-23:-2]-b[-22:-1])**2)))
                 
RMSEg = np.sqrt(1/20*sum(((a[-23:-2]-UIg1[-22:-1])**2)))

RMSEl = np.sqrt(1/20*sum(((a[-23:-2]-UIl1[-22:-1])**2)))


Rsg = Rsquare(a[-23:-2],c[-22:-1])

Rsl = Rsquare(a[-23:-2],b[-22:-1])

Rg = Rsquare(a[-23:-2],UIg1[-22:-1])

Rl = Rsquare(a[-23:-2],UIl1[-22:-1])
